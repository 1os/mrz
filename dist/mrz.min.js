/** mrz@2.0.0, MIT licensed. https://github.com/cheminfo-js/mrz#readme */
!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.mrz=n():e.mrz=n()}("undefined"!=typeof self?self:this,function(){return function(e){var n={};function t(a){if(n[a])return n[a].exports;var r=n[a]={i:a,l:!1,exports:{}};return e[a].call(r.exports,r,r.exports,t),r.l=!0,r.exports}return t.m=e,t.c=n,t.d=function(e,n,a){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:a})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=12)}([function(e,n,t){"use strict";var a=t(15);e.exports={completeResult(e){e.fields||(e.fields={});for(var n=!0,t=0;t<e.annotations.length;t++){var a=e.annotations[t];a.valid||(n=!1),e.fields[a.field]=a.parsed}e.valid=n},getAnnotations(e,n){for(var t=[],r=0;r<n.length;r++){var i=a(n[r]);t.push(i(e))}return t}}},function(e,n,t){"use strict";var a={label:"Document number",field:"documentNumber",parser:t(16)},r={label:"Document number check digit",field:"documentNumberCheckDigit",parser:t(17)},i={label:"Document type",field:"documentType",parser:t(18)},s={label:"Nationality",field:"nationality",parser:t(6)},o={label:"Gender",field:"gender",parser:t(19)},l={label:"Expiration date",field:"expirationDate",parser:t(7)},u={label:"Expiration date check digit",field:"expirationDateCheckDigit",parser:t(8)},c={label:"Global check digit",field:"globalCheckDigit",parser:t(20)},d={label:"Birth date check digit",field:"birthDateCheckDigit",parser:t(8)},f={label:"Birth date",field:"birthDate",parser:t(7)},b={label:"First name",field:"firstname",parser:t(21)},g={label:"Last name",field:"lastname",parser:t(22)},h={label:"Issuing country",field:"issuingCountry",parser:t(6)};e.exports={TD1:[Object.assign({},l,{line:1,start:8,end:14}),Object.assign({},u,{line:1,start:14,end:15,related:[{start:8,end:14,line:1}]}),Object.assign({},o,{line:1,start:7,end:8}),Object.assign({},f,{start:0,end:6,line:1}),Object.assign({},d,{line:1,start:6,end:7,related:[{start:0,end:6,line:1}]}),Object.assign({},i,{line:0,start:0,end:2}),Object.assign({},h,{start:2,end:5,line:0}),Object.assign({},b,{start:0,end:30,line:2}),Object.assign({},g,{start:0,end:30,line:2}),Object.assign({},s,{start:15,end:18,line:1}),Object.assign({},a,{start:5,end:14,line:0,related:[{line:0,start:14,end:15},{line:0,start:15,end:30}]}),Object.assign(r,{start:14,end:15,line:0,related:[{line:0,start:5,end:14},{line:0,start:15,end:30}]}),{label:"Optional field 2",field:"optional2",line:1,start:18,end:29,parser:t(2)},Object.assign({},c,{line:1,start:29,end:30,related:[{line:0,start:5,end:30},{line:1,start:0,end:7},{line:1,start:8,end:15},{line:1,start:18,end:29}]})],TD2:[Object.assign({},b,{start:5,end:36,line:0}),Object.assign({},g,{start:5,end:36,line:0}),Object.assign({},s,{start:10,end:13,line:1}),Object.assign({},a,{start:0,end:9,line:1,related:[{line:1,start:9,end:10},{line:1,start:28,end:35}]}),Object.assign({},r,{start:9,end:10,line:1,related:[{start:0,end:9,line:1},{line:1,start:28,end:35}]}),Object.assign({},o,{line:1,start:20,end:21}),Object.assign({},i,{line:0,start:0,end:2}),Object.assign({},h,{start:2,end:5,line:0}),Object.assign({},f,{line:1,start:13,end:19}),Object.assign({},d,{line:1,start:19,end:20,related:[{line:1,start:13,end:19}]}),Object.assign({},l,{line:1,start:21,end:27}),Object.assign({},u,{line:1,start:27,end:28,related:[{start:21,end:27,line:1}]}),Object.assign({},c,{line:1,start:35,end:36,related:[{line:1,start:0,end:10},{line:1,start:13,end:20},{line:1,start:21,end:35}]})],TD3:[Object.assign({},i,{line:0,start:0,end:2}),Object.assign({},b,{start:5,end:50,line:0}),Object.assign({},g,{start:5,end:50,line:0}),Object.assign({},a,{line:1,start:0,end:9}),Object.assign({},r,{line:1,start:9,end:10,related:[{line:1,start:0,end:9}]}),Object.assign({},s,{line:1,start:10,end:13}),Object.assign({},o,{line:1,start:20,end:21}),Object.assign({},l,{line:1,start:21,end:27}),{label:"Personal number",field:"personalNumber",start:28,end:42,line:1,parser:t(23)},Object.assign({},f,{line:1,start:13,end:19}),Object.assign({},d,{line:1,start:19,end:20,related:[{line:1,start:13,end:19}]}),Object.assign({},h,{line:0,start:2,end:5}),Object.assign({},c,{start:43,end:44,line:1,related:[{line:1,start:0,end:10},{line:1,start:13,end:20},{line:1,start:21,end:43}]})],PCC:[Object.assign({},b,{line:2,start:0,end:30}),Object.assign({},g,{line:2,start:0,end:30}),Object.assign({},h,{line:1,start:2,end:5}),Object.assign({},i,{parser:t(24),line:1,start:0,end:2}),{label:"Language",field:"language",line:0,start:6,end:7,parser:t(9)},Object.assign({},a,{parser:t(25),line:0,start:0,end:10}),{label:"separator 1",field:"separator1",parser:t(10),line:1,start:17,end:19},{label:"separator 2",field:"separator2",parser:t(10),line:1,start:25,end:30},{label:"NIP Code",field:"nipCode",parser:t(11),line:1,start:5,end:14},{label:"Version",field:"version",parser:t(11),line:1,start:14,end:17},Object.assign({},f,{line:1,start:19,end:25})]}},function(e,n,t){"use strict";var a=t(3);e.exports=function(e,n=/^[0-9A-Z<]+$/){if(!e.match(n))throw new Error(`it must match the following regexp: ${n}`);return a(e)}},function(e,n,t){"use strict";e.exports=function(e){return e.replace(/<+$/g,"").replace(/</g," ")}},function(e,n,t){"use strict";e.exports=function(e,n){for(var t=0,a=[7,3,1],r=0;r<e.length;r++){var i=e.charCodeAt(r);60===i&&(i=0),i>=65&&(i-=55),i>=48&&(i-=48),t+=i*=a[r%3]}return t%10===Number(n)}},function(e,n,t){"use strict";e.exports={ABW:"Aruba",AFG:"Afghanistan",AGO:"Angola",AIA:"Anguilla",ALA:"Åland Islands",ALB:"Albania",AND:"Andorra",ARE:"United Arab Emirates",ARG:"Argentina",ARM:"Armenia",ASM:"American Samoa",ATA:"Antarctica",ATF:"French Southern Territories",ATG:"Antigua and Barbuda",AUS:"Australia",AUT:"Austria",AZE:"Azerbaijan",BDI:"Burundi",BEL:"Belgium",BEN:"Benin",BES:"Bonaire, Sint Eustatius and Saba",BFA:"Burkina Faso",BGD:"Bangladesh",BGR:"Bulgaria",BHR:"Bahrain",BHS:"Bahamas",BIH:"Bosnia and Herzegovina",BLM:"Saint Barthélemy",BLR:"Belarus",BLZ:"Belize",BMU:"Bermuda",BOL:"Bolivia, Plurinational State of",BRA:"Brazil",BRB:"Barbados",BRN:"Brunei Darussalam",BTN:"Bhutan",BVT:"Bouvet Island",BWA:"Botswana",CAF:"Central African Republic",CAN:"Canada",CCK:"Cocos (Keeling) Islands",CHE:"Switzerland",CHL:"Chile",CHN:"China",CIV:"Côte d'Ivoire",CMR:"Cameroon",COD:"Congo, the Democratic Republic of the",COG:"Congo",COK:"Cook Islands",COL:"Colombia",COM:"Comoros",CPV:"Cabo Verde",CRI:"Costa Rica",CUB:"Cuba",CUW:"Curaçao",CXR:"Christmas Island",CYM:"Cayman Islands",CYP:"Cyprus",CZE:"Czechia",D:"Germany",DEU:"Germany",DJI:"Djibouti",DMA:"Dominica",DNK:"Denmark",DOM:"Dominican Republic",DZA:"Algeria",ECU:"Ecuador",EGY:"Egypt",ERI:"Eritrea",ESH:"Western Sahara",ESP:"Spain",EST:"Estonia",ETH:"Ethiopia",FIN:"Finland",FJI:"Fiji",FLK:"Falkland Islands (Malvinas)",FRA:"France",FRO:"Faroe Islands",FSM:"Micronesia, Federated States of",GAB:"Gabon",GBD:"British Overseas Territories Citizen (BOTC)",GBN:"British National (Overseas)",GBO:"British Overseas Citizen",GBP:"British Protected Person",GBR:"United Kingdom",GBS:"British Subject",GEO:"Georgia",GGY:"Guernsey",GHA:"Ghana",GIB:"Gibraltar",GIN:"Guinea",GLP:"Guadeloupe",GMB:"Gambia",GNB:"Guinea-Bissau",GNQ:"Equatorial Guinea",GRC:"Greece",GRD:"Grenada",GRL:"Greenland",GTM:"Guatemala",GUF:"French Guiana",GUM:"Guam",GUY:"Guyana",HKG:"Hong Kong",HMD:"Heard Island and McDonald Islands",HND:"Honduras",HRV:"Croatia",HTI:"Haiti",HUN:"Hungary",IDN:"Indonesia",IMN:"Isle of Man",IND:"India",IOT:"British Indian Ocean Territory",IRL:"Ireland",IRN:"Iran, Islamic Republic of",IRQ:"Iraq",ISL:"Iceland",ISR:"Israel",ITA:"Italy",JAM:"Jamaica",JEY:"Jersey",JOR:"Jordan",JPN:"Japan",KAZ:"Kazakhstan",KEN:"Kenya",KGZ:"Kyrgyzstan",KHM:"Cambodia",KIR:"Kiribati",KNA:"Saint Kitts and Nevis",KOR:"Korea, Republic of",KWT:"Kuwait",LAO:"Lao People's Democratic Republic",LBN:"Lebanon",LBR:"Liberia",LBY:"Libya",LCA:"Saint Lucia",LIE:"Liechtenstein",LKA:"Sri Lanka",LSO:"Lesotho",LTU:"Lithuania",LUX:"Luxembourg",LVA:"Latvia",MAC:"Macao",MAF:"Saint Martin (French part)",MAR:"Morocco",MCO:"Monaco",MDA:"Moldova, Republic of",MDG:"Madagascar",MDV:"Maldives",MEX:"Mexico",MHL:"Marshall Islands",MKD:"Macedonia, the former Yugoslav Republic of",MLI:"Mali",MLT:"Malta",MMR:"Myanmar",MNE:"Montenegro",MNG:"Mongolia",MNP:"Northern Mariana Islands",MOZ:"Mozambique",MRT:"Mauritania",MSR:"Montserrat",MTQ:"Martinique",MUS:"Mauritius",MWI:"Malawi",MYS:"Malaysia",MYT:"Mayotte",NAM:"Namibia",NCL:"New Caledonia",NER:"Niger",NFK:"Norfolk Island",NGA:"Nigeria",NIC:"Nicaragua",NIU:"Niue",NLD:"Netherlands",NOR:"Norway",NPL:"Nepal",NRU:"Nauru",NZL:"New Zealand",OMN:"Oman",PAK:"Pakistan",PAN:"Panama",PCN:"Pitcairn",PER:"Peru",PHL:"Philippines",PLW:"Palau",PNG:"Papua New Guinea",POL:"Poland",PRI:"Puerto Rico",PRK:"Korea, Democratic People's Republic of",PRT:"Portugal",PRY:"Paraguay",PSE:"Palestine, State of",PYF:"French Polynesia",QAT:"Qatar",REU:"Réunion",ROU:"Romania",RUS:"Russian Federation",RWA:"Rwanda",SAU:"Saudi Arabia",SDN:"Sudan",SEN:"Senegal",SGP:"Singapore",SGS:"South Georgia and the South Sandwich Islands",SHN:"Saint Helena, Ascension and Tristan da Cunha",SJM:"Svalbard and Jan Mayen",SLB:"Solomon Islands",SLE:"Sierra Leone",SLV:"El Salvador",SMR:"San Marino",SOM:"Somalia",SPM:"Saint Pierre and Miquelon",SRB:"Serbia",SSD:"South Sudan",STP:"Sao Tome and Principe",SUR:"Suriname",SVK:"Slovakia",SVN:"Slovenia",SWE:"Sweden",SWZ:"Swaziland",SXM:"Sint Maarten (Dutch part)",SYC:"Seychelles",SYR:"Syrian Arab Republic",TCA:"Turks and Caicos Islands",TCD:"Chad",TGO:"Togo",THA:"Thailand",TJK:"Tajikistan",TKL:"Tokelau",TKM:"Turkmenistan",TLS:"Timor-Leste",TON:"Tonga",TTO:"Trinidad and Tobago",TUN:"Tunisia",TUR:"Turkey",TUV:"Tuvalu",TWN:"Taiwan, Province of China",TZA:"Tanzania, United Republic of",UGA:"Uganda",UKR:"Ukraine",UMI:"United States Minor Outlying Islands",UNA:"specialized agency of the United Nations",UNK:"Resident of Kosovo issued byUNMIK",UNO:"United Nations organization",URY:"Uruguay",USA:"United States of America",UZB:"Uzbekistan",VAT:"Holy See (Vatican City State)",VCT:"Saint Vincent and the Grenadines",VEN:"Venezuela, Bolivarian Republic of",VGB:"Virgin Islands, British",VIR:"Virgin Islands, U.S.",VNM:"Viet Nam",VUT:"Vanuatu",WLF:"Wallis and Futuna",WSA:"World Service Authority World Passport",WSM:"Samoa",XOM:"Sovereign Military Order of Malta",XXA:"Stateless person",XXB:"Refugee, as per the 1951 Convention",XXC:"Refugee, other than defined above",XXX:"Unspecified nationality",YEM:"Yemen",ZAF:"South Africa",ZMB:"Zambia",ZWE:"Zimbabwe"}},function(e,n,t){"use strict";var a=t(5);e.exports=function(e){var n=a[e];if(!n)throw new Error("the country does not exist");return n}},function(e,n,t){"use strict";e.exports=function(e){var n=e.substring(0,2),t=e.substring(2,4),a=e.substring(4,6);if(t<1||t>12)throw new Error(`Month "${t}" not valid`);if(a<1||a>31)throw new Error(`Day "${a}" not valid`);return`${a}.${t}.${n}`}},function(e,n,t){"use strict";var a=t(4);e.exports=function(e,n){if(!1!==e&&!a(n,e))throw new Error(`Check digit "${e}" not valid`);return e}},function(e,n,t){"use strict";e.exports=function(e){switch(e){case"D":return"german";case"F":return"french";case"I":return"italian";case"R":return"romansh";default:throw new Error(`language ${e} unknown.`)}}},function(e,n,t){"use strict";e.exports=function(e){if(!e.match(/^<*$/))throw new Error('The separator must be composed only by "<"');return e}},function(e,n,t){"use strict";e.exports=function(e){if(!e.match(/^[0-9]+$/))throw new Error("It may only be composed of numbers");return e}},function(e,n,t){"use strict";var a=t(5),r=t(13);e.exports={COUNTRIES:a,parse:r}},function(e,n,t){"use strict";var a=t(14),r=t(26),i=t(27),s=t(28);e.exports=function(e){var n={};switch("string"==typeof e&&(e=e.split(/[\r\n]+/)),e.length){case 2:n=e[0].length<41?r(e):i(e);break;case 3:n=e[0].length<15?s(e):a(e);break;default:throw new Error("input must be an array of 2 or 3 elements")}return n}},function(e,n,t){"use strict";var a=t(0),r=a.getAnnotations,i=a.completeResult,s=t(1).TD1;e.exports=function(e){e.forEach(e=>{if(30!==e.length)throw new Error("each line should have a length of 30 in TD1")});var n={format:"TD1",annotations:r(e,s)};return i(n),n}},function(e,n,t){"use strict";function a(e,n){return e[n.line].substring(n.start,n.end)}e.exports=function(e){var n=Object.assign({},e,{parser:void 0}),t=e.parser;if(void 0===!e.line||void 0===!e.start||void 0===!e.end||!e.parser)throw new Error("field must have a line, start, stop and parser");return function(r){var i=a(r,e),s=e.related||[];s=s.map(e=>a(r,e));try{var o=t(i,...s);n.parsed=o,n.valid=!0}catch(e){n.parsed=null,n.valid=!1,n.message=e.message}return n}}},function(e,n,t){"use strict";var a=t(3);e.exports=function(e,n,t){return"<"===n&&t&&(e+=(t=a(t)).substring(0,t.length-1)),e.replace(/</g)}},function(e,n,t){"use strict";var a=t(4),r=t(3);e.exports=function(e,n,t){if("<"===e&&t&&(n=`${n}<${(t=r(t)).substring(0,t.length-1)}`,e=t.charAt(t.length-1)),!a(n,e))throw new Error(`document number check digit "${e}" not valid`);return e}},function(e,n,t){"use strict";e.exports=function(e){var n=e.substring(0,1);if("V"===e.substring(1,2).replace("<",""))throw new Error("Document type (second symbol) may not be V");switch(n){case"P":return"passport";case"I":return"identity card";case"A":case"C":return"";default:throw new Error("Document type must be either P, I, A or C")}}},function(e,n,t){"use strict";e.exports=function(e){switch(e){case"<":return"unknown";case"M":return"male";case"F":return"female";default:throw new Error(`The sex "${e}" is incorrect. Allowed values: M, F or <.`)}}},function(e,n,t){"use strict";var a=t(4);e.exports=function(e,...n){var t=n.join("");if(!a(t,e))throw new Error("global check digit");return e}},function(e,n,t){"use strict";var a=t(2);e.exports=function(e){return a(e.replace(/.*?<{2}/,""),/^[A-Z<]+<*$/)}},function(e,n,t){"use strict";var a=t(2);e.exports=function(e){return a(e.replace(/<{2}.*/,""),/^[A-Z<]+<*$/)}},function(e,n,t){"use strict";var a=t(2);e.exports=function(e){return a(e,/^[A-Z0-9<]+<*$/)}},function(e,n,t){"use strict";e.exports=function(e){if("FA"!==e)throw new Error("document type must be FA");return e}},function(e,n,t){"use strict";var a=t(9);e.exports=function(e){var n=e.substring(0,3),t=e.substring(3,6),r=e.charAt(6),i=e.substring(7);if(!n.match(/^[A-Z]{3}$/))throw new Error(`The document number "${e}" is incorrect. Need to start by 3 uppercase letters.`);if(!t.match(/^[0-9]{3}$/))throw new Error(`The document number "${e}" is incorrect. Need to have 3 digits in position 3, 4 and 5.`);if("<<"!==i)throw new Error(`The document number "${e}" is incorrect. Need to end with <<.`);return a(r),e.substring(0,7)}},function(e,n,t){"use strict";var a=t(0),r=a.getAnnotations,i=a.completeResult,s=t(1).TD2;e.exports=function(e){e.forEach(e=>{if(36!==e.length)throw new Error("each line should have a length of 36 in TD2")});var n={format:"TD2",annotations:r(e,s)};return i(n),n}},function(e,n,t){"use strict";var a=t(0),r=a.getAnnotations,i=a.completeResult,s=t(1).TD3;e.exports=function(e){e.forEach(e=>{if(44!==e.length)throw new Error("each line should have a length of 30 in TD1")});var n={format:"TD3",annotations:r(e,s)};return i(n),n}},function(e,n,t){"use strict";var a=t(0),r=a.getAnnotations,i=a.completeResult,s=t(1).PCC;e.exports=function(e){if(9!==e[0].length)throw new Error("First line must have 9 symbols");if(30!==e[1].length)throw new Error("Second line must have 30 symbols");if(30!==e[2].length)throw new Error("Third line must have 30 symbols");var n={format:"swissDrivingLicence",annotations:r(e,s)};return i(n),n}}])});
//# sourceMappingURL=mrz.min.js.map